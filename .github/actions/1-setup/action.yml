name: Install prerequisites
inputs:
  clang_version:
    required: true
  llvm_version:
    required: true
  arch:
    required: true
runs:
  using: composite
  steps:

    - name: 'Linux: Install required apt packages'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        cd ..
        export DEBIAN_FRONTEND=noninteractive
        arch='${{ inputs.arch }}'
        if [[ $arch == x86_64 ]]; then
          sudo dpkg --add-architecture i386
        fi
        sudo apt-get -q update
        packages=( \
          git-core cmake g++ \
          libcurl4 libxml2-dev libzstd-dev \
          curl gdb p7zip-full tzdata unzip zip python3-pip \
        )
        if [[ $arch == x86_64 ]]; then
          packages+=(g++-multilib libcurl4:i386)
        fi
        sudo -E apt-get -yq install ${packages[@]}
        # Make sure to link libzstd statically
        sudo rm /usr/lib/$arch-linux-gnu/libzstd.so
        # Install a more recent CMake version in the AArch64 container (for mimalloc...)
        if [[ $arch == aarch64 ]]; then
          curl -fL --retry 3 --max-time 300 -o cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.31.4/cmake-3.31.4-linux-$arch.tar.gz
          mkdir cmake
          tar -xf cmake.tar.gz --strip 1 -C cmake
          rm cmake.tar.gz
          sudo ln -sf $PWD/cmake/bin/cmake /usr/bin/cmake
        fi

    - name: 'Linux: Download & extract clang' # into ../clang
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        cd ..
        arch='${{ inputs.arch }}'
        extraSuffix=''
        if [[ $arch == x86_64 ]]; then
          extraSuffix='-ubuntu-18.04'
        fi
        curl -fL --retry 3 --max-time 300 -o clang.tar.xz \
          https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ inputs.clang_version }}/clang+llvm-${{ inputs.clang_version }}-$arch-linux-gnu$extraSuffix.tar.xz
        mkdir clang
        tar -xf clang.tar.xz --strip 1 -C clang
        rm clang.tar.xz
        clang/bin/clang --version
    - name: 'Windows: Install clang'
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -eux
        cd ..
        curl -fL --retry 3 --max-time 300 -o clang.exe \
          https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ inputs.clang_version }}/LLVM-${{ inputs.clang_version }}-win64.exe
        ./clang.exe //S # double-slash for bash
        rm clang.exe
        # C:\Program Files\LLVM\bin should already be in PATH
        clang-cl --version

    - name: Download & extract LDC-flavoured LLVM # into ../llvm
      shell: bash
      run: |
        set -eux
        cd ..

        version='${{ inputs.llvm_version }}'

        if [[ "$version" = *.* ]]; then
          tag="ldc-v$version"
        else
          tag=CI
        fi

        arch='${{ inputs.arch }}'

        # use assertions for untagged builds
        assertsSuffix="-withAsserts"
        if [[ '${{ github.ref }}' = refs/tags/* ]]; then
          assertsSuffix=""
        fi

        if [[ '${{ runner.os }}' == Windows ]]; then
          curl -fL --retry 3 --max-time 300 -o llvm.7z \
            https://github.com/ldc-developers/llvm-project/releases/download/$tag/llvm-$version-windows-$arch$assertsSuffix.7z
          mkdir llvm
          cd llvm
          7z x ../llvm.7z >/dev/null
          rm ../llvm.7z
          cd ..
        else
          if [[ '${{ runner.os }}' == Linux ]]; then
            os=linux
          elif [[ '${{ runner.os }}' == macOS ]]; then
            os=osx
          fi
          curl -fL --retry 3 --max-time 300 -o llvm.tar.xz \
            https://github.com/ldc-developers/llvm-project/releases/download/$tag/llvm-$version-$os-$arch$assertsSuffix.tar.xz
          mkdir llvm
          tar -xf llvm.tar.xz --strip 1 -C llvm
          rm llvm.tar.xz
        fi

        llvm/bin/llvm-config --version

    - name: 'Linux: Make lld the default linker'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        sudo ln -sf "$(dirname "$PWD")/llvm/bin/ld.lld" /usr/bin/ld
        ld --version

    - name: Install ninja
      if: inputs.arch != 'aarch64'
      uses: symmetryinvestments/gha-setup-ninja@v2
    - name: Install ninja (Linux AArch64)
      if: inputs.arch == 'aarch64'
      shell: bash
      run: |
        set -eux
        cd ..
        curl -fL --retry 3 --max-time 60 -O https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-linux-aarch64.zip
        mkdir ninja
        unzip ninja-linux-aarch64.zip -d ninja
        rm ninja-linux-aarch64.zip
        sudo ln -sf $PWD/ninja/ninja /usr/bin/ninja

    - name: Install D host compiler
      uses: dlang-community/setup-dlang@v1
      with:
        # macOS arm64: use LDC v1.39.0 using LLVM v17, as Xcode v16
        compiler: ${{ inputs.arch == 'arm64' && 'ldc-1.39.0' || 'ldc-latest' }}
    - name: 'Posix: Clear LD_LIBRARY_PATH env variable' # don't use host druntime/Phobos .so/.dylib etc.
      if: runner.os != 'Windows'
      shell: bash
      run: echo "LD_LIBRARY_PATH=" >> $GITHUB_ENV

    - name: Install lit
      shell: bash
      run: |
        set -euxo pipefail
        python3 --version
        if [[ '${{ runner.os }}-${{ inputs.arch }}' == 'macOS-arm64' ]]; then
          brew install lit
        else
          python3 -m pip install --user lit psutil
        fi
        python3 -c "import lit.main; lit.main.main();" --version . | head -n 1

    # the druntime tests require GNU make
    - name: 'Windows: Make sure GNU make is installed'
      if: runner.os == 'Windows'
      shell: cmd
      run: make --version

    - name: 'Windows: Download & extract libcurl' # into ../libcurl/ldc2
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -eux
        cd ..
        curl -fL --retry 3 --max-time 60 -o libcurl.7z \
          https://github.com/ldc-developers/mingw-w64-libs/releases/download/v8.0.0/libcurl-7.74.0-zlib-static-ipv6-sspi-schannel.7z
        mkdir libcurl
        cd libcurl
        7z x ../libcurl.7z >/dev/null
        rm ../libcurl.7z
        mkdir ldc2
        if [[ '${{ inputs.arch }}' == x64 ]]; then
          cp dmd2/windows/bin64/libcurl.dll ldc2/
          cp dmd2/windows/lib64/*.* ldc2/
        else
          cp dmd2/windows/bin/libcurl.dll ldc2/
          cp dmd2/windows/lib32mscoff/*.* ldc2/
        fi
        ls -lh ldc2/

    - name: 'Windows: Set LDC_VSDIR env variable' # to somewhat speed-up MSVC auto-detection
      if: runner.os == 'Windows'
      shell: bash
      run: echo "LDC_VSDIR=$(vswhere -latest -property installationPath)" >> $GITHUB_ENV

    - name: 'Windows x86: Make CMake configure 64-bit clang-cl for 32-bit code emission'
      if: runner.os == 'Windows' && inputs.arch == 'x86'
      shell: bash
      run: |
        set -eux
        echo "CFLAGS=-m32" >> $GITHUB_ENV
        echo "CXXFLAGS=-m32" >> $GITHUB_ENV
        echo "ASMFLAGS=-m32" >> $GITHUB_ENV
